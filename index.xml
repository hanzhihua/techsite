<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>一个码农 技术分享</title>
    <link>https://hanzhihua.cn/</link>
    <description>Recent content on 一个码农 技术分享</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>All rights reserved - 2019 沪ICP备19026538号</copyright>
    <lastBuildDate>Mon, 05 Aug 2019 20:32:50 +0800</lastBuildDate>
    
        <atom:link href="https://hanzhihua.cn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>去zk网络分区容错方案</title>
      <link>https://hanzhihua.cn/post/zkchange/</link>
      <pubDate>Mon, 05 Aug 2019 20:32:50 +0800</pubDate>
      
      <guid>https://hanzhihua.cn/post/zkchange/</guid>
      
        <description>

&lt;p&gt;最近在重构一个DAG系统，遇到一个组件节点通信、及节点发现的问题。&lt;/p&gt;

&lt;h1 id=&#34;原方案&#34;&gt;原方案&lt;/h1&gt;

&lt;p&gt;基本上就是传统的解决方案，服务发现、调用依赖zookeeper&lt;br /&gt;
部署图&lt;br /&gt;


&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://hanzhihua.cn/Snip20190805_207.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://hanzhihua.cn/Snip20190805_207.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;
&lt;br /&gt;
这个方案，有一个致命问题就是当执行节点与zk出现网络不稳定时，会造成控制节点做出错误的决定&lt;br /&gt;
这个时候也许控制节点与执行节点的通信是非常正常，这就是典型的网络分区问题&lt;br /&gt;
考虑到 控制节点与执行节点之间的通信还是主要，而与zk的通信就不是那么的重要，所以减少对zk的依赖，
只处理zk的节点上线通知，对于下线通知就不处理了，改成依赖节点间的心跳&lt;/p&gt;

&lt;h1 id=&#34;新方案&#34;&gt;新方案&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;只侦听zk的节点新增通知，忽略节点下线的通知&lt;/li&gt;
&lt;li&gt;在执行节点与通信节点新增心跳&lt;/li&gt;
&lt;li&gt;节点下线，由心跳超时来确定&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://hanzhihua.cn/Snip20190805_210.png&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://hanzhihua.cn/Snip20190805_210.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;


&lt;h1 id=&#34;附加知识点&#34;&gt;附加知识点&lt;/h1&gt;

&lt;p&gt;在开发节点心跳功能时，需要对网络timeout类型完全理解。&lt;/p&gt;

&lt;p&gt;案例分析，出现下面异常：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;2019-08-02 18:44:59.476 controlnode [nioEventLoopGroup-2-1] c.b.a.c.j.i.net.NettyChannelClient.exceptionCaught ERROR - error while pipeline: {}
java.io.IOException: Operation timed out
	at sun.nio.ch.FileDispatcherImpl.read0(Native Method)
	at sun.nio.ch.SocketDispatcher.read(SocketDispatcher.java:39)
	at sun.nio.ch.IOUtil.readIntoNativeBuffer(IOUtil.java:223)
	at sun.nio.ch.IOUtil.read(IOUtil.java:192)
	at sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:380)
	at io.netty.buffer.PooledUnsafeDirectByteBuf.setBytes(PooledUnsafeDirectByteBuf.java:311)
	at io.netty.buffer.AbstractByteBuf.writeBytes(AbstractByteBuf.java:881)
	at io.netty.channel.socket.nio.NioSocketChannel.doReadBytes(NioSocketChannel.java:241)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:119)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)
	at io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:111)
	at io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:137)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;很多同学会认为是应用层中设置的connectiontimeout,或者sotime,其实&lt;strong&gt;可能&lt;/strong&gt;都不是&lt;br /&gt;
而是tcp层 &lt;strong&gt;报文失败重传 timeout&lt;/strong&gt;&lt;br /&gt;
可以使用tcpdump来查看，如果当tcp层重传报文多次，kernel会reset连接,对应应用层就收到了上述的异常&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>对话机器人设计</title>
      <link>https://hanzhihua.cn/post/chatbot/</link>
      <pubDate>Sat, 03 Aug 2019 22:43:59 +0800</pubDate>
      
      <guid>https://hanzhihua.cn/post/chatbot/</guid>
      
        <description>&lt;p&gt;最近在研究机器人对话场景，里面涉及的内容比较多，主要以工程的角度去简单实现。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用word2vec(利用&lt;a href=&#34;https://github.com/hankcs/HanLP&#34;&gt;hanlp&lt;/a&gt;)，以概率论的方式简单实现&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;支持词槽判断&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;支持流程意图判断&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;#组件图&lt;/p&gt;



&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://hanzhihua.cn/chatbot.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://hanzhihua.cn/chatbot.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

</description>
      
    </item>
    
    <item>
      <title>关于</title>
      <link>https://hanzhihua.cn/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>https://hanzhihua.cn/about/</guid>
      
        <description>

&lt;p&gt;我叫韩志华，很高兴你能找到这儿，这是我的个人站点。这个站点的域名是 hanzhihua.cn ，我名字的拼音 hanzhihua ，再加上 .cn 后缀。&lt;/p&gt;

&lt;h2 id=&#34;关于我&#34;&gt;关于我&lt;/h2&gt;

&lt;p&gt;近20年软件开发经验，一直在各个一线互联网公司就职，带过中间件团队，基础服务团队，负责过大数据平台。&lt;/p&gt;

&lt;p&gt;目前从事大数据相关的工作！&lt;/p&gt;

&lt;p&gt;本人爱好比较少，主要就是两个爱好，写代码和与朋友聊天（主要是闲扯）。另外也喜欢玩狼人杀，但因为组织起来太费劲，基本上也不怎么玩了&lt;/p&gt;

&lt;h2 id=&#34;关于本站的建站目的&#34;&gt;建站目的&lt;/h2&gt;

&lt;p&gt;本站的内容都是原创，记录我工作上的技术积累，主要分 分布式、大数据、人工智能、基础设施、编程语言 五个模块
希望大家能喜欢&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>
